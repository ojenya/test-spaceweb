{"version":3,"sources":["logo.svg","components/Card.jsx","components/Footer.jsx","components/Main.jsx","components/Support.jsx","components/VPS.jsx","components/Domains.jsx","components/ContentHeader.jsx","components/Account.jsx","components/Maintance.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","class","id","userID","title","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","points","body","Footer","className","href","Main","list","to","src","logo","alt","activeStyle","fontWeight","color","ContentHeader","path","Support","map","el","i","key","VPS","Domains","Contentheader","Account","Maintance","Home","App","useState","setList","useEffect","fetch","then","response","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,0KC4B5BC,G,MAzBF,SAACC,GACV,OAEI,oCACA,iCACI,iCACI,0BAAMC,MAAM,iBAAZ,IAA8BD,EAAME,GAApC,IAAyCF,EAAMG,OAA/C,IAAwDH,EAAMI,OAC9D,yBAAKH,MAAM,sBACP,yBAAKI,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,eAAa,IAAIC,iBAAe,QAAQC,kBAAgB,QAAQZ,MAAM,gCAA+B,8BAAUa,OAAO,sBAInP,yBAAKb,MAAM,mBAAmBD,EAAMe,MACpC,yBAAKd,MAAM,wBACb,yBAAKI,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,eAAa,IAAIC,iBAAe,QAAQC,kBAAgB,QAAQZ,MAAM,8BAA6B,8BAAUa,OAAO,uBAI3O,wBAAIb,MAAM,eCIHe,EAtBA,SAAChB,GACZ,OACA,oCACA,4BAAQiB,UAAU,UACd,wBAAIA,UAAU,aACV,8CAAgB,uBAAGC,KAAK,KAAR,gFAChB,mIACA,gFAAa,uBAAGA,KAAK,KAAR,iBAGjB,wBAAID,UAAU,WACV,4BAAI,uBAAGC,KAAK,oBAAR,sBAAJ,yGACA,4BAAI,uBAAGA,KAAK,oBAAR,sBAAJ,kDACA,4BAAI,uBAAGA,KAAK,qBAAR,sBAAJ,mH,+BC8EGC,EA3EF,SAACnB,GACV,IAAMoB,EAAOpB,EAAMoB,KACnB,OACI,oCACA,kBAAC,IAAD,KACI,0BAAMH,UAAU,QACZ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,QACX,kBAAC,IAAD,CAAMI,GAAG,mBACL,yBAAKC,IAAKC,IAAMC,IAAI,6CAAUlB,MAAM,WAI5C,4BACI,kBAAC,IAAD,CAASe,GAAG,WACZI,YAAa,CACTC,WAAY,OACZC,MAAO,YAHX,8CAQA,kBAAC,IAAD,CAASN,GAAG,OACZI,YAAa,CACbC,WAAY,OACZC,MAAO,YAHP,OAQA,kBAAC,IAAD,CAASN,GAAG,WAAWI,YAAa,CACpCC,WAAY,OACZC,MAAO,YAFP,wCAOA,kBAAC,IAAD,CAASN,GAAG,WAAWI,YAAa,CACpCC,WAAY,OACZC,MAAO,YAFP,4DASR,yBAAKV,UAAU,UACX,kBAACW,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,YACR,kBAAC,EAAD,CAAST,KAAMA,KAEnB,kBAAC,IAAD,CAAOS,KAAK,QACR,kBAAC,EAAD,CAAKT,KAAMA,KAEf,kBAAC,IAAD,CAAOS,KAAK,YACR,kBAAC,EAAD,CAAST,KAAMA,KAEnB,kBAAC,IAAD,CAAOS,KAAK,YACR,kBAAC,EAAD,CAAST,KAAMA,KAEnB,kBAAC,IAAD,CAAOS,KAAK,mBACR,kBAAC,EAAD,CAAWT,KAAMA,WCP9BU,EA/DC,SAAC9B,GAAW,IAClBoB,EAAQpB,EAARoB,KACN,OACI,oCACA,kBAAC,IAAD,KACA,yBAAKH,UAAU,qBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,0DACA,yBAAKA,UAAU,SAAf,0DAGA,wBAAIhB,MAAM,YACV,yBAAKgB,UAAU,eACX,4BACI,kBAAC,IAAD,CAASI,GAAG,SACZI,YAAa,CACTC,WAAY,OACZC,MAAO,YAHX,wCAQA,kBAAC,IAAD,CAASN,GAAG,aACZI,YAAa,CACbC,WAAY,OACZC,MAAO,YAHP,8CAQA,kBAAC,IAAD,CAASN,GAAG,WAAWI,YAAa,CACpCC,WAAY,OACZC,MAAO,YAFP,qFASR,kBAAC,IAAD,KACQ,kBAAC,IAAD,CAAOE,KAAK,WAIZ,kBAAC,IAAD,CAAOA,KAAK,eAIZ,kBAAC,IAAD,CAAOA,KAAK,YACXT,EAAKA,EAAKW,KAAI,SAACC,EAAGC,GAAJ,OAAS,kBAAC,EAAD,eAAMC,IAAKD,GAAOD,OAAQ,yBAAKf,UAAU,gBCzC1EkB,EAhBH,SAACnC,GACT,OACI,oCACI,yBAAKiB,UAAU,qBACP,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,OACA,yBAAKA,UAAU,SAAf,OACA,yBAAKA,UAAU,kBCQxBmB,EAfC,SAACpC,GACb,OACI,oCACA,yBAAKiB,UAAU,qBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,wCACA,yBAAKA,UAAU,SAAf,wCACA,yBAAKA,UAAU,kBCQhBoB,EAhBO,SAACrC,GACnB,OACI,oCACI,yBAAKiB,UAAU,oBACX,4BACI,4BAAI,uBAAGC,KAAK,KAAR,mBACJ,4BAAI,uBAAGA,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,uCCQToB,EAdC,SAACtC,GACb,OACI,oCACA,yBAAKiB,UAAU,qBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,8CACA,yBAAKA,UAAU,SAAf,8CACA,yBAAKA,UAAU,kBCkDhBsB,EA1DG,SAACvC,GACf,OACI,oCACC,yBAAKiB,UAAU,qBACJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,+FACA,yBAAKA,UAAU,SAAf,YACA,6BAEA,yBAAKA,UAAU,YAAf,0rBAII,6BAAK,6BAJT,qOAOI,6BAAK,6BAPT,2LAQ2C,uBAAGC,KAAK,wCAAR,wCACvC,6BATJ,2KAUqC,6BACjC,6UAII,8BAfR,+GAiB2B,6BACvB,wFAOA,6BAzBJ,kiBA4BI,6BAAK,6BA5BT,g3CAiCY,6BAjCZ,ufAkCgD,6BAAK,6BAlCrD,4fAqCI,6BArCJ,gGAsCsB,uBAAGA,KAAK,8CAAR,mBAAwE,6BAtC9F,IAsCoG,6BAtCpG,UAuCM,2FAvCN,kDCKTsB,EAZF,SAACxC,GAAW,IACXoB,EAAQpB,EAARoB,KACV,OACI,oCACA,kBAAC,EAAD,CAAMA,KAAMA,IACZ,kBAAC,EAAD,QCiBOqB,MArBf,WAAe,MAOUC,qBAPV,mBAONtB,EAPM,KAODuB,EAPC,KAgBb,OAPFC,qBAAW,WACTC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIL,EAAQK,QACtB,IAIC,kBAAC,EAAD,CAAM5B,KAAMA,KCVK6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.101d2f1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.59a5bfcb.svg\";","import React from 'react'\n\n\nconst Card = (props) => {\n    return (\n    \n        <>\n        <details>\n            <summary>\n                <span class=\"summary-title\">#{props.id} {props.userID} {props.title}</span>\n                <div class=\"summary-chevron-up\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-chevron-down\"><polyline points=\"6 9 12 15 18 9\"></polyline></svg>\n                </div>\n            </summary>\n\n            <div class=\"summary-content\">{props.body}</div>\n            <div class=\"summary-chevron-down\">\n\t\t        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-chevron-up\"><polyline points=\"18 15 12 9 6 15\"></polyline></svg>\n            </div>\n\t\t</details>\n\n        <hr class=\"rounded\"></hr>\n        </>\n    )\n}\n\n\n\nexport default Card\n","import React from 'react'\n\n\nconst Footer = (props) => {\n    return (\n    <>\n    <footer className=\"footer\">\n        <ul className=\"copyright\">\n            <li>© 2001-2018 <a href=\"#\">ООО «Спейсвеб»</a></li>\n            <li>Все права защищены.</li>\n            <li>Лицензия <a href=\"#\">N°163230</a></li>\n        </ul>\n\n        <ul className=\"contact\">\n            <li><a href=\"tel:+78123341222\">+7 (812) 334-12-22</a> (в Санкт-Петербурге)</li>\n            <li><a href=\"tel:+74956631612\">+7 (495) 663-16-12</a> (в Москве)</li>\n            <li><a href=\"tel:+780010011615\">+7 (800) 100-16-15</a> (бесплатно по России)</li>\n        </ul>\n    </footer>\n    </>\n    )\n}\n\n\n\nexport default Footer\n","import React from 'react'\nimport logo from '../logo.svg';\nimport {\n    Support,\n    Account,\n    VPS,\n    Domains,\n    ContentHeader,\n    Maintance} from './'\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    NavLink\n  } from \"react-router-dom\";\n\nconst Main = (props) => {\n    const list = props.list\n    return (\n        <>\n        <Router>\n            <main className=\"main\">\n                <nav className=\"nav\">\n                    <div className=\"logo\">\n                        <Link to=\"/test-spaceweb/\">\n                            <img src={logo} alt=\"Логотип\" width=\"100%\"/>\n                        </Link>\n                    </div>\n\n                    <ul>\n                        <NavLink to=\"/account\" \n                        activeStyle={{\n                            fontWeight: \"bold\",\n                            color: \"#F7FAFB\"\n                        }}>\n                            Аккаунт\n                        </NavLink>\n\n                        <NavLink to=\"/vps\" \n                        activeStyle={{\n                        fontWeight: \"bold\",\n                        color: \"#F7FAFB\"\n                        }}>\n                            VPS\n                        </NavLink>\n\n                        <NavLink to=\"/domains\" activeStyle={{\n                        fontWeight: \"bold\",\n                        color: \"#F7FAFB\"\n                        }}>\n                            Домены\n                        </NavLink>\n\n                        <NavLink to=\"/support\" activeStyle={{\n                        fontWeight: \"bold\",\n                        color: \"#F7FAFB\"\n                        }}>\n                            Поддержка\n                        </NavLink>\n                    </ul>\n                </nav>\n\n                <div className=\"conent\">\n                    <ContentHeader/>\n                    <Switch>\n                        <Route path=\"/account\">\n                            <Account list={list}/>\n                        </Route>\n                        <Route path=\"/vps\">\n                            <VPS list={list}/>\n                        </Route>\n                        <Route path=\"/domains\">\n                            <Domains list={list}/>\n                        </Route>\n                        <Route path=\"/support\">\n                            <Support list={list}/>\n                        </Route>\n                        <Route path=\"/test-spaceweb/\">\n                            <Maintance list={list}/>\n                        </Route>\n                        \n                    </Switch>\n                </div>\n            </main>\n        </Router>\n        </>\n    )\n}\n\n\n\nexport default Main\n","import React from 'react'\nimport Card from './Card'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    NavLink\n  } from \"react-router-dom\";\n\n\nconst Support = (props) => {\n    const{list} = props\n    return (\n        <>\n        <Router>\n        <div className=\"container-content\">\n            <div className=\"api\">\n                <div className=\"subtitle\">Поддержка</div>\n                <div className=\"title\">Поддержка</div>\n\n                {/* <div className=\"separator\"></div> */}\n                <hr class=\"rounded\"></hr>\n                <nav className=\"content-nav\">\n                    <ul>\n                        <NavLink to=\"/order\" \n                        activeStyle={{\n                            fontWeight: \"bold\",\n                            color: \"#062436\"\n                        }}>\n                            Заявка\n                        </NavLink>\n\n                        <NavLink to=\"/templates\" \n                        activeStyle={{\n                        fontWeight: \"bold\",\n                        color: \"#062436\"\n                        }}>\n                            Шаблоны\n                        </NavLink>\n\n                        <NavLink to=\"/history\" activeStyle={{\n                        fontWeight: \"bold\",\n                        color: \"#062436\"\n                        }}>\n                            История заявок\n                        </NavLink>\n                    </ul>\n                </nav>\n\n                <Switch>\n                        <Route path=\"/order\">\n\n                        </Route>\n\n                        <Route path=\"/templates\">\n\n                        </Route>\n\n                        <Route path=\"/history\">\n                        {list?list.map((el,i)=>(<Card key={i} {...el}/>)):<div className=\"fail\"></div>}\n                        </Route>\n                     \n                    </Switch>\n\n            </div>\n        </div>\n        </Router>\n        </>\n    )\n}\n\n\n\nexport default Support\n","import React from 'react'\n\n\nconst VPS = (props) => {\n    return (\n        <>\n            <div className=\"container-content\">\n                    <div className=\"api\">\n                        <div className=\"subtitle\">VPS</div>\n                        <div className=\"title\">VPS</div>\n                        <div className=\"separator\"></div>\n                    </div>\n            </div>    \n        </>\n    )\n}\n\n\n\nexport default VPS\n","import React from 'react'\n\n\nconst Domains = (props) => {\n    return (\n        <>\n        <div className=\"container-content\">\n            <div className=\"api\">\n                <div className=\"subtitle\">Домены</div>\n                <div className=\"title\">Домены</div>\n                <div className=\"separator\"></div>\n            </div>\n        </div>  \n        </>\n    )\n}\n\n\nexport default Domains\n","import React from 'react'\n\nconst Contentheader = (props) => {\n    return (\n        <>\n            <div className=\"container-header\">\n                <ul>\n                    <li><a href=\"#\">1000.00 ₽</a></li>\n                    <li><a href=\"#\">user</a></li>\n                    <li><a href=\"#\">Выйти</a></li>\n                </ul>\n            </div>  \n        </>\n    )\n}\n\n\n\nexport default Contentheader\n","import React from 'react'\n\n\nconst Account = (props) => {\n    return (\n        <>\n        <div className=\"container-content\">\n            <div className=\"api\">\n                <div className=\"subtitle\">Аккаунт</div>\n                <div className=\"title\">Аккаунт</div>\n                <div className=\"separator\"></div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Account\n","import React from 'react'\n\nconst Maintance = (props) => {\n    return (\n        <>\n         <div className=\"container-content\">\n                    <div className=\"api\">\n                        <div className=\"subtitle\">Тестовое задание</div>\n                        <div className=\"title\">SpaceWeb</div>\n                        <hr/>\n\n                        <div className=\"subtitle\">\n                            ✅Необходимо реализовать SPA (Single Page Application), которое будет\n                            показывать заголовки статей и раскрывать полный текст статьи при\n                            нажатии на заголовок.\n                            <br/><br/>                            \n                            Цель: проверить верстку по макету и знания\n                            ReactJS.\n                            <br/><br/>\n                            ❌Статьи в виде XML находится по ссылке <a href=\"https://sweb.ru/export/turbojournal/\">https://sweb.ru/export/turbojournal/</a>\n                            <br/>\n                            где заголовок содержится в тэге: <br/>\n                            <code>\n                                &lt;turbo:topic&gt;\n                                Топ-6 сервисов для проверки кроссбраузерности сайта\n                                &lt;/turbo:topic&gt;\n                                <br/>\n                            </code>\n                            а текст статьи в тэге: <br/>\n                            <code>\n                                &lt;turbo:content&gt;\n                                &lt;![CDATA[\n                                ….\n                                ]]&gt;\n                                &lt;/turbo:content&gt;\n                            </code>\n                            <br/>\n                            ✅ Статьи должны прогружаться в приложение динамически из URL, а не\n                            просто сохранены в виде локальных данных.\n                            <br/><br/>\n                            ✅За основу необходимо взять макет из прикрепленного файла\n                            «Поддержка_История.png». Это макет от другой задачи, но нам важно в\n                            принципе понять навыки верстки. Поэтому на основе этого макета вместо\n                            номера заявки будет тема статьи, а при клике подгружаться содержимое\n                            статьи. <br/> ✅Остальное нужно сверстать без изменений (надписи текстом,\n                                ❌картинки в виде иконок), как в макете. <br/><br/>\n                            ❌Шрифт Proxima Nova (как на основном сайте https://sweb.ru/ ), иконки и\n                            элементы можно взять отдельно в файле «UIKit _ Компоненты.png»\n                            <hr/>\n                            ✅ Тестовые данные <a href=\"https://jsonplaceholder.typicode.com/posts\">JSONPlaceholder</a><br/> <br/>\n                            ✅ <b>БЕСПЛАТНЫЙ</b> шрифт Montserrat\n                        </div>\n                    </div>\n            </div>    \n        </>\n    )\n}\n\n\n\nexport default Maintance\n","import React from 'react'\n\nimport {Main,Footer,Card}  from '../components'\n\nconst Home = (props) => {\n        const{list} = props\n    return (\n        <>\n        <Main list={list}/>\n        <Footer/>\n        </>\n    )\n}\n\n\n\nexport default Home\n","import React,{useState,useEffect} from 'react';\nimport './App.scss';\n\nimport {Home}  from './pages'\n\nfunction App() {\n\n  // Main\n  // --> <Nav>\n  // --> <Content>\n  // Footer\n\n  const [list,setList] = useState()\n\nuseEffect (()=>{\n  fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .then(json => setList(json))\n},[])\n\n\n  return (\n   <Home list={list}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}